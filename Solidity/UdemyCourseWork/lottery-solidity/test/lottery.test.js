const assert = require('assert');
const ganache = require('ganache-cli');
const Web3 = require('web3');
const {interface, bytecode} = require('../compile');

const provider = ganache.provider();
const web3 = new Web3(provider);

let accounts;
let lottery;

beforeEach(async () => {
    //gather a list of all the accounts generated by lcal ganache network
    accounts = await web3.eth.getAccounts();
    
    //deploy the contract with one of those accounts
    lottery = await new web3.eth.Contract(JSON.parse(interface))
                    .deploy({data: "0x"+bytecode})
                    .send({from: accounts[0], gas: '1000000'});
    
    lottery.setProvider(provider);
});

describe('lottery', () => {
    it('deploys a contract', () => {
        assert.ok(lottery.options.address);
    }); 
    
    it('allows one account to enter', async () => {
        await lottery.methods.enter().send({
            from: accounts[0],
            value: web3.utils.toWei('.02','ether')
        })

        const players = await lottery.methods.getPlayers().call({
            from: accounts[0]
        });

        assert.equal(accounts[0], players[0]);
        assert.equal(1,players.length);

    });

    it('allows multiple accounts to enter', async() => {
        await lottery.methods.enter().send({
            from:accounts[0],
            value: web3.utils.toWei('.02','ether')
        })

        await lottery.methods.enter().send({
            from:accounts[1],
            value: web3.utils.toWei('.02','ether')
        })
        await lottery.methods.enter().send({
            from:accounts[2],
            value: web3.utils.toWei('.02','ether')
        })

        const players = await lottery.methods.getPlayers().call({
            from: accounts[0]
        });

        assert.equal(accounts[0], players[0]);
        assert.equal(accounts[1], players[1]);
        assert.equal(accounts[2], players[2]);
        assert.equal(3,players.length);
    });

    it('User Sends In > .01 ether', async () => {        
        try{
            await lottery.methods.enter().send({
                from:accounts[0],
                value: 200
            });
            assert(false);
        }catch(err){
            assert(err);
        }
    });

    it('only manager can call pickWinner', async () => {        
        try{
            await lottery.methods.pickWinner().send({
                from: accounts[1],
                value: 200
            });
            assert(false);
        }catch(err){
            assert(err);
        }
    });

    if('Sends money to winner and resets players array', async () => {
        await lottery.methods.enter().send({
            from: accounts[0],
            value: web3.utils.toWei('2','ether')
        });

        var initBalance = await web3.eth.getBalance(accounts[0]);

        await lottery.methods.pickWinner().send({
            from: accounts[0]
        });

        var newBalance = await web3.eth.getBalance(accounts[0]);
        assert(newBalance > initBalance);
        
        var players = await lottery.methods.getPlayers().call({
            from: accounts[0]
        });

        assert(players.length == 0);
    });
});


// class Car {
//     park(){
//         return 'stopped';
//     }
//     drive(){
//         return'vroom';
//     }
// }

// let car

// beforeEach(() => {
//     car = new Car();
// });

// describe('Car', () => {
//     it('can park', () => {
//         assert.equal(car.park(), 'stopped');
//     })
    
//     it('can drive', () => {
//         assert.equal(car.drive(), 'vroom');
//     })
// })

// it('has a default message', async () => {
//     const message = await inbox.methods.message().call();
//     assert.equal(message, initialString);
// });

// it('can change the message', async() => {
//     const newMessage = 'This is a new goodbye!';
//     await inbox.methods.setMessage(newMessage).send({from: accounts[0]});
//     const message = await inbox.methods.message().call();

//     assert.equal(message, newMessage);

// });