const assert = require('assert');
const ganache = require('ganache-cli');
const Web3 = require('web3');
const {interface, bytecode} = require('../compile');

const provider = ganache.provider();
const web3 = new Web3(provider);

const initialString = 'Hi there!';

let accounts;
let inbox;

beforeEach(async () => {
    //gather a list of all the accounts generated by lcal ganache network
    accounts = await web3.eth.getAccounts();
    
    //deploy the contract with one of those accounts
    inbox = await new web3.eth.Contract(JSON.parse(interface))
                    .deploy({data: "0x"+bytecode, arguments:[initialString]})
                    .send({from: accounts[0], gas: '1000000'});
    
    inbox.setProvider(provider);
});

describe('Inbox', () => {
    it('deploys a contract', () => {
        assert.ok(inbox.options.address);
    });

    it('has a default message', async () => {
        const message = await inbox.methods.message().call();
        assert.equal(message, initialString);
    });
    
    it('can change the message', async() => {
        const newMessage = 'This is a new goodbye!';
        await inbox.methods.setMessage(newMessage).send({from: accounts[0]});
        const message = await inbox.methods.message().call();

        assert.equal(message, newMessage);
    });
});


// class Car {
//     park(){
//         return 'stopped';
//     }
//     drive(){
//         return'vroom';
//     }
// }

// let car

// beforeEach(() => {
//     car = new Car();
// });

// describe('Car', () => {
//     it('can park', () => {
//         assert.equal(car.park(), 'stopped');
//     })
    
//     it('can drive', () => {
//         assert.equal(car.drive(), 'vroom');
//     })
// })